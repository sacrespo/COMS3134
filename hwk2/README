README, HW2, szc2103: 

1) To create the stack necessary for finding the palindromes, I first created the class MyStack, which allowed for the creation of the stack abstract data type. MyStack's methods push elements onto an array and pop elements off of it, using int top as a marker for the top of the stack. Using this class in tandem with the FindPalindromes class, a user can input a text file that is scanned in. Each line is evaluated such that the first half of the line is pushed onto a stack, leaving the last half of the line in a char array. By popping each of the elements on the stack, they can be compared with the last half of the char array in the order the array is presented (though, for arrays with an odd number of elements, the last half of the char array is evaluated at one past the middle element). If the boolean isPalindrome is true at the end of the evaluation, the line is a palindrome and it is printed. 

2) First, individual ExpressionNodes are created. These are then used to create ExpressionTrees, which are pushed onto a stack. ExpressionTrees are evaluated based on their roots, which are operators. The ExpressionTree class has methods to build ExpressionTrees, evaluate ExpressionTrees, and convert postfix expressions into prefix and infix expressions. 

3) The BinarySearchTree class written by Weiss is edited to accomodate the use of lazy deletion. Lazy deletion is implemented by giving each node a boolean called "deleted" that represents if a Node is deleted, or not. When deleted is false, the boolean is not deleted. All methods impacted by lazy deletion have been modified. 